from django.db import models
from traceback import format_stack
from esp.settings import LOG_FILE
from django.shortcuts import render_to_response # aseering 2-14-2007: This can't be Axiak's fancy esp.web.data version because otherwise we get an import loop.  Possibly we should fix that someday.

# Create your models here.

class Log(models.Model):
    # Store/log errors
    text = models.TextField(blank=True)
    extra = models.TextField(blank=True)
    stack_trace = models.TextField(blank=True)
    current_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return str(self.current_date) + "\nTEXT: " + self.text + "\nEXTRA:" + self.extra + "\nSTACKTRACE: " + self.stack_trace

    def save(self):
        if LOG_FILE != None:
            errfile = open(LOG_FILE, 'a')
            errfile.write( str(self) )
            errfile.close()

        from esp.dbmail.models import send_mail
        send_mail('Error: ' + self.text, str(self), 'server@esp.mit.edu', ['esp-webmasters@mit.edu'])

        super(Log, self).save()

    class Admin:
        pass
        
        

def error(err_txt, extra = '', stack_trace = None, log = True):
    """  Log an error, with the specified text
    stack_trace = None causes the stack trace to be autogenerated """
    
    if log:
        # Log an error to the database
        # Let programmers be lame.  Auto stack trace.
        if stack_trace == None:
            stack_trace = "\n".join(format_stack())

        # Save the error as a database record
        err = Log()
        err.text = err_txt
        err.stack_trace = stack_trace


        try:
            err.extra = str(extra)
        except:
            err.extra = ''
            
        err.save()

    return render_to_response('error.html', { 'error': err_txt } )
