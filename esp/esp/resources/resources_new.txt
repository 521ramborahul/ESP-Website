More thought needed about interaction between ClassSection, class length, Events (timeblocks for class), ResourceAssignments

Potential Resolution:

@reversion
class ResourceAssignment:
    section = ForeignKey(ClassSection)
    meeting_time = ForeignKey(Event)
    classroom = ForeignKey(Classroom)
    resources = ManyToManyField(Resource)
    ctime = DateTime(auto_on_create)
    mtime = DateTime(auto_on_modify)
    last_modified_by = ForeignKey(ESPUser)
    is_active = BooleanField



More thought needed about special resource requests

Make use of fields that Taylor added in his Schema Simplification project.

All m2m assignments should be done via intermediate tables, with created/modified times, and expirations rather than deletions. Need to keep history.

Program-specific overwrites for global data

Classroom Type
- Not sure if this is necessary / optimal.
- It would match up well with what the autoscheduler expects (I think).
- Each classroom would have one or more classroom types.
- In most cases, if not all, the classroom type actually just describes the existence of one or more permanent fixtures/resources of a room. So in a way, adding a classroom type would not add any additional functionality, and could actually reduce the power of resources.
- But some classroom types might not match up to physical resources, so maybe this would be useful.

Classroom
- Should the name be generalized (not all classes are located in rooms)?
- "class location", "class space", "space", "location", etc. ?
- Global (not per program like currently).
- Per-program Event availabilities.
- m2m of ResourceTypes that the room is always furnishes with.
- Instructions field (optional, global, both admin and teacher/student).
- Comments (optional, global, admin).

Building
- Should the name be generalized (not all classes are located in buildings)?
- "classroom group", "classroom collection", "classroom set", etc.
- Global (not per program).
- Instructions field (optional, global, both admin and teacher/student).
- Comments (optional, global).
- Should each classroom be required to be in a group (e.g., should there be a group for outdoor classes, or meeting point classes)? Or should each classroom have at most one building, and have a building only if it is located inside?
- Should groups be allowed to nest (e.g. Building 4, Floor 2 inside Building 4, or ESG inside Building 24)? If so, should arbitrary nesting be allowed? Or should there be at most two levels (so Classroom, or Classroom->Group1, or Classroom->Group2->Group1)?
- No functionality for this currently, so isn't strictly necessary; however
- Some nice functionalities can be built for this:
-- The autoscheduler tries to guess buildings based on individual room names, and only schedules back-to-back classes if they will be in the same guessed building. This functionality can be made more precise if we specifically track buildings:
--- The autoscheduler can continue doing what it's doing: only putting back-to-back classes in the same building.
--- Each building can have a symmetric m2m of all the adjacent or nearby buildings where it is legal to schedule a class that immediately follows a class scheduled in that building.
--- Each pair of buildings can have a distance (probably a unit of distance, though possibly only a relative scale), with closer distances much prefered when scheduling back-to-back classes.
-- Each building can be linked to a map location:
--- Store an address, which can be linked to Google Maps.
--- Store coordinates, which can be linked to Google Maps. Optionally, use GeoDjango <https://docs.djangoproject.com/en/1.3/ref/contrib/gis/> as well.
--- Globally store a campus map, and store pixel coordinates in this map for each building.
-- Store global and per-program notes for each building:
--- Who to contact to reserve certain rooms.
--- What doors we need to be sure don't become locked.
--- What particularly confusing locations should be signed.
--- Locations of signs for a program.
--- Etc.

Classroom Availability
- Foreign key to Classroom
- Foreign key to Program
- m2m to Event
- Lock level (for autoscheduler)

ClassroomAssignment
(alternatively, foreign key from ClassSection to Classroom, and m2m from ClassSection to Event; though this will get rid of the generality of being able to assign multiple rooms to a class)
- Foreign key to ClassSection
- Foreign key to Classroom
- m2m to Event (alternatively, foreign key to Event, and multiple ClassroomAssignments per ClassSection)

ResourceCategory (other potential names: ResourceClass, ResourceFamily, ResourceSet, ResourceCollection, ResourceGroup)
- A set of ResourceTypes.
- A broad grouping of Resources/ResourceTypes that will appear under a common heading in the ResourceRequest form, e.g. "A/V", "Technology", etc.
- Global (not per program like currently).

ResourceType
- A type of resource, e.g. computer, Mac adapter, board, etc.
- AbstractResources in the same ResourceType are similar, but not identical.
- Global (not per program like currently).
- Teachers can request to get Resources for a ResourceType, and can select which AbstractResources would work for them (so requests are AND on the level of ResourceTypes, and OR on the level of AbstractResources).

AbstractResource
- Represents an abstract version of a specific type of Resource, e.g. Linux computer, mini-display-port to VGA Mac adapter, chalkboard, wireless microphone, etc.
- Resources of the same AbstractResource are identical (or similar enough such that teachers and admins don't care about the differences).
- Global (not per program like currently).
- Is active setting (both global and per-program settings).

Resource
- An instance of a physical resource, e.g. Chromebook, ADP2 Mac adapter, etc.
- Global (not per program like currently).
- Global is active setting.
- Per-program Event availabilities.

Resource Availability
- Foreign key to Resource
- Foreign key to Program
- m2m to Event
- Lock level (for autoscheduler)

ResourceRequest
- m2m from ClassSubject to AbstractResource, through ResourceRequest intermediate model
- notes from teacher

ResourceAssignment
- Foreign key to ClassSection OR foreign key to Classroom (can assign Resource to a class or to a classroom).
- m2m to Event (timeblocks to assign resource for; can get rid of if we decide to always assign resources to class for entirety of class / to classrooms for entirety of classroom availability) OR m2m to ClassroomAssignment (either way, need to make sure to keep updated with changing class timeblocks).
- Foreign key to Resource.
- Lock level (for autoscheduler).

All of the above global models should also have optional program-specific overrides.
